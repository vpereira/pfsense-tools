#!/bin/sh

#set -e
#set -x
#set -u

# Keep track of build failures
rm -f /tmp/pfPort_build_failures
touch /tmp/pfPort_build_failures

# Keep track of items already built (dependencies)
rm -f /tmp/pfPort_alreadybuilt
if [ ! -f /tmp/pfPort_alreadybuilt ]; then
	touch /tmp/pfPort_alreadybuilt
fi

PFPORTSDIR=`dirname $0`

# Individual logs here
mkdir -p /tmp/pfPort

BUILD_ONEPORT=""
MAKEJ_PORTS=""
CHECK_INSTALLED=""

while getopts P:J:c o; do
	case "${o}" in
		P)	BUILD_ONEPORT="${OPTARG}"
			echo ">>> Building a single port: '${BUILD_ONEPORT}'"
			;;
		J)	MAKEJ_PORTS="${OPTARG}"
			echo ">>> Setting MAKEJ_PORTS (-j) to '${MAKEJ_PORTS}'"
			;;
		c)	CHECK_INSTALLED="check_installed"
			;;
	esac
done

if [ -f ./pfsense-build.conf ]; then
	if [ `grep -c '^export REMOVE_PHP=true' pfsense-build.conf` -gt 0 ]; then
		echo ">>> Removing previous PHP environment..."
		find /usr/local/include /usr/local/man/ /usr/local/bin /usr/local/sbin /usr/local/lib /usr/local/etc -name "*php*" -exec rm -rf {} \; 2>/dev/null
		find /usr/local -name extensions.ini -exec rm {} \;
		rm -rf /var/db/pkg/php*
		sed -e '/php/d' -e '/pecl/d' /tmp/pfPort_alreadybuilt > /tmp/pfPort_alreadybuilt_REMOVE_PHP
		mv /tmp/pfPort_alreadybuilt_REMOVE_PHP /tmp/pfPort_alreadybuilt
	fi
fi
if [ -f pfsense_local.sh ]; then
	MAKEJ_PORTS=`grep MAKEJ_PORTS pfsense_local.sh | cut -d'"' -f2`
elif [ -f ../builder_scripts/pfsense_local.sh ]; then
	MAKEJ_PORTS=`grep MAKEJ_PORTS ../builder_scripts/pfsense_local.sh | cut -d'"' -f2`
fi

# Port name					Path to port								Verify install filename
PORTSTOBUILD="
pfflowd-0.8					/usr/ports/net/pfflowd-0.8					/usr/local/sbin/pfflowd
ipsec-tools			/usr/ports/security/ipsec-tools		/usr/local/sbin/racoon
ipfw-classifyd				/usr/ports/net/ipfw-classifyd				/usr/local/sbin/ipfw-classifyd
dhcpleases					/usr/ports/sysutils/dhcpleases				/usr/local/sbin/dhcpleases
filterdns					/usr/ports/net/filterdns					/usr/local/sbin/filterdns
apinger						/usr/ports/net/apinger						/usr/local/sbin/apinger
rrdtool						/usr/ports/databases/rrdtool				/usr/local/bin/rrdtool
cpdup						/usr/ports/sysutils/cpdup					/usr/local/bin/cpdup
cpustats					/usr/ports/sysutils/cpustats				/usr/local/sbin/cpustats
beep						/usr/ports/audio/beep						/usr/local/bin/beep
choparp						/usr/ports/net-mgmt/choparp					/usr/local/sbin/choparp
dnsmasq-no-isc-dhcp-parser	/usr/ports/dns/dnsmasq-no-isc-dhcp-parser	/usr/local/sbin/dnsmasq
expiretable					/usr/ports/security/expiretable				/usr/local/sbin/expiretable
ifstated					/usr/ports/net/ifstated						/usr/local/sbin/ifstated
igmpproxy					/usr/ports/net/igmpproxy					/usr/local/sbin/igmpproxy
isc-dhcp42-server			/usr/ports/net/isc-dhcp42-server			/usr/local/sbin/dhcpd
isc-dhcp42-relay			/usr/ports/net/isc-dhcp42-relay				/usr/local/sbin/dhcrelay
lighttpd					/usr/ports/www/lighttpd						/usr/local/sbin/lighttpd
miniupnpd					/usr/ports/net/miniupnpd					/usr/local/sbin/miniupnpd
mpd4						/usr/ports/net/mpd4							/usr/local/sbin/mpd4
mpd5						/usr/ports/net/mpd5							/usr/local/sbin/mpd5
olsrd						/usr/ports/net/olsrd						/usr/local/sbin/olsrd
pftop						/usr/ports/sysutils/pftop					/usr/local/sbin/pftop
libevent					/usr/ports/devel/libevent					/usr/local/lib/libevent.so
relayd						/usr/ports/net/relayd						/usr/local/sbin/relayd
fping						/usr/ports/net/fping						/usr/local/sbin/fping
minicron					/usr/ports/sysutils/minicron				/usr/local/bin/minicron
php52						/usr/ports/lang/php52						/usr/local/bin/php
pecl-APC					/usr/ports/www/pecl-APC						/usr/local/lib/php/20060613/apc.so
php52-bcmath				/usr/ports/math/php52-bcmath				/usr/local/lib/php/20060613/bcmath.so
php52-bz2					/usr/ports/archivers/php52-bz2				/usr/local/lib/php/20060613/bz2.so
php52-ctype					/usr/ports/textproc/php52-ctype				/usr/local/lib/php/20060613/ctype.so
php52-curl					/usr/ports/ftp/php52-curl					/usr/local/lib/php/20060613/curl.so
php52-gettext				/usr/ports/devel/php52-gettext				/usr/local/lib/php/20060613/gettext.so
php52-ldap					/usr/ports/net/php52-ldap					/usr/local/lib/php/20060613/ldap.so
php52-mbstring				/usr/ports/converters/php52-mbstring		/usr/local/lib/php/20060613/mbstring.so
php52-mhash					/usr/ports/security/php52-mhash				/usr/local/lib/php/20060613/mhash.so
php52-mysql					/usr/ports/databases/php52-mysql			/usr/local/lib/php/20060613/mysql.so
php52-openssl				/usr/ports/security/php52-openssl			/usr/local/lib/php/20060613/openssl.so
php52-pcntl					/usr/ports/devel/php52-pcntl				/usr/local/lib/php/20060613/pcntl.so
php52-pcre					/usr/ports/devel/php52-pcre					/usr/local/lib/php/20060613/pcre.so
php52-posix					/usr/ports/sysutils/php52-posix				/usr/local/lib/php/20060613/posix.so
php52-pdo					/usr/ports/databases/php52-pdo				/usr/local/lib/php/20060613/pdo.so
php52-pdo_sqlite			/usr/ports/databases/php52-pdo_sqlite		/usr/local/lib/php/20060613/pdo_sqlite.so
pecl-radius					/usr/ports/net/pecl-radius					/usr/local/lib/php/20060613/radius.so
php52-pfSense-module		/usr/ports/devel/php52-pfSense-module		/usr/local/lib/php/20060613/pfSense.so
php52-readline				/usr/ports/devel/php52-readline				/usr/local/lib/php/20060613/readline.so
php52-session				/usr/ports/www/php52-session				/usr/local/lib/php/20060613/session.so
php52-simplexml				/usr/ports/textproc/php52-simplexml			/usr/local/lib/php/20060613/simplexml.so
php52-sockets				/usr/ports/net/php52-sockets				/usr/local/lib/php/20060613/sockets.so
php52-shmop					/usr/ports/devel/php52-shmop				/usr/local/lib/php/20060613/shmop.so
php52-sysvmsg				/usr/ports/devel/php52-sysvmsg				/usr/local/lib/php/20060613/sysvmsg.so
php52-sysvsem				/usr/ports/devel/php52-sysvsem				/usr/local/lib/php/20060613/sysvsem.so
php52-sysvshm				/usr/ports/devel/php52-sysvshm				/usr/local/lib/php/20060613/sysvshm.so
php52-spl					/usr/ports/devel/php52-spl					/usr/local/lib/php/20060613/spl.so
php52-sqlite				/usr/ports/databases/php52-sqlite			/usr/local/lib/php/20060613/pdo_sqlite.so
php52-tokenizer				/usr/ports/devel/php52-tokenizer			/usr/local/lib/php/20060613/tokenizer.so
php52-xml					/usr/ports/textproc/php52-xml				/usr/local/lib/php/20060613/xml.so
php52-zlib					/usr/ports/archivers/php52-zlib				/usr/local/lib/php/20060613/zlib.so
php52-xmlreader				/usr/ports/textproc/php52-xmlreader			/usr/local/lib/php/20060613/xmlreader.so
php52-xmlwriter				/usr/ports/textproc/php52-xmlwriter			/usr/local/lib/php/20060613/xmlwriter.so
pecl-inclued				/usr/ports/devel/pecl-inclued				/usr/local/lib/php/20060613/inclued.so
zmq							/usr/ports/devel/zmq						/usr/local/lib/libzmq.so.1
php-zmq						/usr/ports/devel/php-zmq					/usr/local/lib/php/20060613/zmq.so
php-xdebug					/usr/ports/devel/php-xdebug					/usr/local/lib/php/20060613/xdebug.so
php-suhosin					/usr/ports/security/php-suhosin				/usr/local/lib/php/20060613/suhosin.so
openvpn22					/usr/ports/security/openvpn22				/usr/local/sbin/openvpn
syslog-ng					/usr/ports/sysutils/syslog-ng				/usr/local/sbin/syslog-ng
zip							/usr/ports/archivers/zip					/usr/local/bin/zip
links						/usr/ports/www/links						/usr/local/bin/links
elinks						/usr/ports/www/elinks						/usr/local/bin/elinks
ntp					/usr/ports/net/ntp						/usr/local/bin/ntpd
php52-json					/usr/ports/devel/php52-json					/usr/local/lib/php/20060613/json.so
rate						/usr/ports/net-mgmt/rate					/usr/local/bin/rate
wol							/usr/ports/net/wol							/usr/local/bin/wol
dhcp6						/usr/ports/net/dhcp6						/usr/local/sbin/dhcp6c	
3gstat_um175				/usr/ports/comms/3gstat_um175				/usr/local/bin/3gstat
wrapalixresetbutton			/usr/ports/sysutils/wrapalixresetbutton		/usr/local/sbin/alixresetbtn
b43-fwcutter				/usr/ports/sysutils/b43-fwcutter			/usr/local/bin/b43-fwcutter
bwi-firmware-kmod			/usr/ports/net/bwi-firmware-kmod			/boot/modules/bwi_v3_ucode.ko
voucher						/usr/ports/sysutils/voucher					/usr/local/bin/voucher
gzsig						/usr/ports/sysutils/gzsig					/usr/local/sbin/gzsig
ssh_tunnel_shell			/usr/ports/sysutils/ssh_tunnel_shell		/usr/local/sbin/ssh_tunnel_shell
sshlockout_pf				/usr/ports/sysutils/sshlockout_pf			/usr/local/sbin/sshlockout_pf
smartmontools				/usr/ports/sysutils/smartmontools			/usr/local/sbin/smartctl
check_reload_status			/usr/ports/sysutils/check_reload_status		/usr/local/sbin/check_reload_status
ataidle						/usr/ports/sysutils/ataidle					/usr/local/sbin/ataidle
syslogd						/usr/ports/sysutils/syslogd					/usr/sbin/syslogd
clog						/usr/ports/sysutils/clog					/usr/sbin/clog
pecl-ssh2					/usr/ports/security/pecl-ssh2				/usr/local/lib/php/20060613/ssh2.so
autoconf-wrapper			/usr/ports/devel/autoconf-wrapper			/usr/local/bin/autoconf-wrapper
rsync						/usr/ports/net/rsync						/usr/local/bin/rsync
ioncube 					/usr/ports/devel/ioncube					/usr/local/lib/php/20060613/ioncube/ioncube_loader.so
gogoc 					/usr/ports/net/gogoc					/usr/local/bin/gogoc"

clean_make_install() {
	# Architecture, supported ARCH values are:
	#  Tier 1: i386, AMD64, and PC98
	#  Tier 2: ARM, PowerPC, ia64, Sparc64 and sun4v
	#  Tier 3: MIPS and S/390
	#  Tier 4: None at the moment
	#  Source: http:/www.freebsd.org/doc/en/articles/committers-guide/archs.html
	# Default is i386
	local PORTA
	local VERIFY
	local _PORTNAME
	local PKGNAME
	local _PKGNAME
	local BUILDLIST

	PORTA=$1
	VERIFY=""
	if [ $# -gt 1 ]; then
		VERIFY="$2"
	fi

	_PORTNAME=`basename $PORTA`
	PKGNAME=`make -C $PORTA -V PKGNAME`

	# Check to see if item is already built
	if [ `grep -c "$PKGNAME" /tmp/pfPort_alreadybuilt` -gt 0 ]; then
		if [ -z "$VERIFY" -o -f $VERIFY ]; then
			echo ">>> $_PORTNAME(${PKGNAME})...already built on this run.  Skipping."
			return;
		fi
	fi

	echo -n ">>> Building $_PORTNAME(${PKGNAME})..."
	if [ "${CHECK_INSTALLED}" = "check_installed" ]; then
		if [ -d /var/db/pkg/${PKGNAME} ]; then
			if [ -z "$VERIFY" -o -f $VERIFY ]; then
				echo "$PKGNAME" >> /tmp/pfPort_alreadybuilt
				echo "already built.  Skipping."
				return
			fi
		fi
	fi

	if ! script /tmp/$_PORTNAME make -C $PORTA TARGET_ARCH=${ARCH} ${MAKEJ_PORTS} BATCH=yes FORCE_PKG_REGISTER=yes NOPORTDOCS=yes clean depends build install clean </dev/null 2>&1 1>/dev/null; then
		echo ">>> Building $_PORTNAME(${PKGNAME})...ERROR!" >> /tmp/pfPort_build_failures
		echo "Failed to build. Error log in /tmp/$_PORTNAME."
	else
		mv /tmp/$_PORTNAME /tmp/pfPort/$PKGNAME
		echo "$PKGNAME" >> /tmp/pfPort_alreadybuilt
		echo "Done."
	fi

}

clean_build_install_clean() {
	local PORTPATH
	local VERIFYPORT
	local PORTNAME

	PORTPATH=$1
	VERIFYPORT=""
	if [ $# -gt 1 ]; then
		VERIFYPORT="$2"
	fi
	PORTNAME=`basename $PORTPATH`

	if [ ! -d $PORTPATH ]; then
		mkdir -p $PORTPATH
	fi

	if [ -d ${PFPORTSDIR}/$PORTNAME ]; then
		echo ">>> Overlaying pfPorts ${PFPORTSDIR}/$PORTNAME to ${PORTPATH} and building..."
		if [ ! -f ${PFPORTSDIR}/$PORTNAME/useports ]; then
			rm -rf $PORTPATH
			mkdir -p $PORTPATH
		fi
		rm -rf ${PFPORTSDIR}/$PORTNAME/work 2>/dev/null
		cp -R ${PFPORTSDIR}/$PORTNAME/* $PORTPATH/
	fi
	clean_make_install $PORTPATH $VERIFYPORT
}

# Change the for seperator to use C/R instead of whitespace
oIFS=$IFS
IFS="
"

for PORT in $PORTSTOBUILD; do
	PORT_T=`echo $PORT | sed "s/            /       /g"`
	PORT_NAME=`echo $PORT_T | awk '{ print $1 }'`
	if [ "$BUILD_ONEPORT" != "" ]; then
		if [ "$PORT_NAME" != "$BUILD_ONEPORT" ]; then
			continue;
		fi
	fi
	PORT_LOCATION=`echo $PORT_T | awk '{ print $2 }'`
	PORT_VERIFY_INSTALL_FILE=`echo $PORT_T | awk '{ print $3 }'`
	MIPS_DO_NOT_BUILD="beep
"
	for DONOTBUILD in $MIPS_DO_NOT_BUILD; do
		if [ "$PORT_NAME" = "$DONOTBUILD" ]; then
			if [ "$ARCH" = "mips" ]; then
				echo ">>> Skipping $PORT_NAME on MIPS platform..."
				continue 2;
			fi
			if [ "$ARCH" = "amd64" ]; then
				echo ">>> Skipping $PORT_NAME on AMD64 platform..."
				continue 2;
			fi
			if [ "$ARCH" = "powerpc" ]; then
				echo ">>> Skipping $PORT_NAME on POWERPC platform..."
				continue 2;
			fi
		fi
	done

	PORTSUFFIX=`echo $PORT_LOCATION | cut -d'/' -f4-5`
	if [ "$PORTSUFFIX" != "" ]; then
		# Return the seperator back to its original value
		IFS=$oIFS
		clean_build_install_clean $PORT_LOCATION $PORT_VERIFY_INSTALL_FILE
		# Change the for seperator to use C/R instead of whitespace
		oIFS=$IFS
		IFS="
"
	else
		echo ">>> Could not Locate PORTSUFFIX for $PORT_LOCATION"
	fi
	# If the file is not found, log it.
	if [ ! -f $PORT_VERIFY_INSTALL_FILE ]; then
		echo ">>> File not found $PORT - $PORT_VERIFY_INSTALL_FILE" >> /tmp/pfPort_build_failures
	fi
	# Change the for seperator to use C/R instead of whitespace
	oIFS=$IFS
	IFS="
"
done
# Change the for seperator to use C/R instead of whitespace
IFS="
"

echo ">>> Ports with failures: `cat /tmp/pfPort_build_failures | wc -l`"
cat /tmp/pfPort_build_failures
echo

sleep 1

# Restore
IFS=$oIFS
